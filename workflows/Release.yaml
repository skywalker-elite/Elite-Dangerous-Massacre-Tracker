name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      attestations: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Check tag version
        uses: nowsprinting/check-version-format-action@v3
        id: version
        with:
          prefix: 'v'

      - name: Version tag only step
        run: |
          echo "Found valid version format in tag!"
          echo "Full version: ${{ steps.version.outputs.full }}"
          echo "Major version: ${{ steps.version.outputs.major }}"
          echo "Major with pre-release: ${{ steps.version.outputs.major_prerelease }}"
        if: steps.version.outputs.is_valid == 'true'
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Check VERSION file sameness
        id: check_version_file
        run: |
          echo "Checking if VERSION file matches tag version..."
          if [ "$(cat VERSION)" != "${{ steps.version.outputs.full }}" ]; then
            echo "VERSION file does not match tag version!"
            exit 1
          fi
          echo "VERSION file matches tag version!"
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: ${{ steps.version.outputs.is_stable == 'false' }}

  pyinstaller-build-linux:
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      attestations: write
    steps:
      - name: Create Executable
        id: create_executable
        uses: skywalkerctu/pyinstaller-action@v1.2.1
        with:
          python_ver: '3.12.7'
          spec: 'build.spec'
          requirements: 'requirements.txt'
          upload_exe_with_name: 'EDCM-Linux'
      - name: Generate artifact attestation
        id: attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ${{ steps.create_executable.outputs.executable_path }}/Elite Dangerous Carrier Manager
      - name: Upload Linux Executable
        id: upload-linux-executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.create_executable.outputs.executable_path }}/Elite Dangerous Carrier Manager
          asset_name: EDCM-Linux
          asset_content_type: application/octet-stream
      - name: Upload Linux Attestation as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: attestation-linux
          path: ${{ steps.attestation.outputs.bundle-path }}

  pyinstaller-build:
    runs-on: windows-latest
    needs: create-release
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      attestations: write
    steps:
      - name: Create Executable
        id: create_executable
        uses: skywalkerctu/pyinstaller-action@v1.2.1
        with:
          python_ver: '3.12.7'
          spec: 'build.spec'
          requirements: 'requirements.txt'
          upload_exe_with_name: 'EDCM'
      - name: Generate artifact attestation
        id: attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ${{ steps.create_executable.outputs.executable_path }}/Elite Dangerous Carrier Manager.exe
      - name: Upload Windows Executable
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.create_executable.outputs.executable_path }}/Elite Dangerous Carrier Manager.exe
          asset_name: EDCM.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Windows Attestation as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: attestation-windows
          path: ${{ steps.attestation.outputs.bundle-path }}

  combine-attestations:
    runs-on: ubuntu-latest
    needs: [create-release, pyinstaller-build-linux, pyinstaller-build]
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      attestations: write
    steps:
      - name: Download Linux Executable Attestation
        uses: actions/download-artifact@v4
        with:
          name: attestation-linux
          path: ./attestations/linux

      - name: Download Windows Executable Attestation
        uses: actions/download-artifact@v4
        with:
          name: attestation-windows
          path: ./attestations/windows

      - name: Combine Attestations
        run: |
          jq -s '.[0] * .[1]' ./attestations/linux/attestation.json ./attestations/windows/attestation.json > combined-attestation.json

      - name: Upload Combined Attestation
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./combined-attestation.json
          asset_name: attestation.json
          asset_content_type: application/json